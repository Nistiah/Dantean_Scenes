#include <stdio.h>
#include "bit_set.h"

int toggle_bit(uint32_t* pvalue, int b);
int set_bit(uint32_t* pvalue, int b);
int clear_bit(uint32_t* pvalue, int b);
int isset_bit(const uint32_t* pvalue, int b);

int main()
{
    printf("Podaj  liczbe :");
    unsigned int n;
    uint32_t *nn = &n;
    if(scanf("%u", &n) != 1)
    {
        printf("Incorrect input");
        return 1;
    }
    printf("Podaj  bit :");
    int m;

    if(scanf("%d", &m) != 1)
    {
        printf("Incorrect input");
        return 1;
    }
    if(m<0||m>31){
        printf("Invalid bit index");
        return 2;
    }
    int k;
    printf("Select operation (0-toggle, 1-set, 2-clear, 3-read):");
    if(scanf("%d", &k) != 1)
    {
        printf("Incorrect input");
        return 1;
    }
    if(k<0||k>3){
        printf("Invalid operation");
        return 2;
    }
    int c;
    switch (k){
        case 0:
            toggle_bit(nn,m);
            printf("%x", n);
            break;
        case 1:
            set_bit(nn,m);
            printf("%x", n);
            break;
        case 2:
            clear_bit(nn,m);
            printf("%x", n);
            break;
        case 3:

            c=isset_bit(nn,m);
            printf("%d", c);
            break;
        default:
            break;
    }



    return 0;

}
int set_bit(uint32_t* pvalue, int b){
    if(pvalue==NULL||b<0||b>31){return -1;}
    union bit_set unia;
    unia.wartosc=*pvalue;
    int bajt = b/8;
    b%=8;
    if(b==0){
        (unia.tab+bajt)->bit1=1;
    }else if(b==1){
        (unia.tab+bajt)->bit2=1;
    }else if(b==2){
        (unia.tab+bajt)->bit3=1;
    }else if(b==3){
        (unia.tab+bajt)->bit4=1;
    }else if(b==4){
        (unia.tab+bajt)->bit5=1;
    }else if(b==5){
        (unia.tab+bajt)->bit6=1;
    }else if(b==6){
        (unia.tab+bajt)->bit7=1;
    }else if(b==7){
        (unia.tab+bajt)->bit8=1;
    }else{
        return 0;
    }
    *pvalue=unia.wartosc;
    return 0;
}

int toggle_bit(uint32_t* pvalue, int b)
{
    if(pvalue==NULL||b<0||b>31){return -1;}
    union bit_set unia;
    unia.wartosc=*pvalue;
    int bajt = b/8;
    b%=8;
    if(b==0){
        (unia.tab+bajt)->bit1=1-(unia.tab+bajt)->bit1%2;
    }else if(b==1){
        (unia.tab+bajt)->bit2=1-(unia.tab+bajt)->bit2%2;
    }else if(b==2){
        (unia.tab+bajt)->bit3=1-(unia.tab+bajt)->bit3%2;
    }else if(b==3){
        (unia.tab+bajt)->bit4=1-(unia.tab+bajt)->bit4%2;
    }else if(b==4){
        (unia.tab+bajt)->bit5=1-(unia.tab+bajt)->bit5%2;
    }else if(b==5){
        (unia.tab+bajt)->bit6=1-(unia.tab+bajt)->bit6%2;
    }else if(b==6){
        (unia.tab+bajt)->bit7=1-(unia.tab+bajt)->bit7%2;
    }else if(b==7){
        (unia.tab+bajt)->bit8=1-(unia.tab+bajt)->bit8%2;
    }else{
        return 0;
    }
    *pvalue=unia.wartosc;
    return 0;

}
int clear_bit(uint32_t* pvalue, int b){
    if(pvalue==NULL||b<0||b>31){return -1;}
    union bit_set unia;
    unia.wartosc=*pvalue;
    int bajt = b/8;
    b%=8;
    if(b==0){
        (unia.tab+bajt)->bit1=0;
    }else if(b==1){
        (unia.tab+bajt)->bit2=0;
    }else if(b==2){
        (unia.tab+bajt)->bit3=0;
    }else if(b==3){
        (unia.tab+bajt)->bit4=0;
    }else if(b==4){
        (unia.tab+bajt)->bit5=0;
    }else if(b==5){
        (unia.tab+bajt)->bit6=0;
    }else if(b==6){
        (unia.tab+bajt)->bit7=0;
    }else if(b==7){
        (unia.tab+bajt)->bit8=0;
    }else{
        return 0;
    }
    *pvalue=unia.wartosc;
    return 0;
}
int isset_bit(const uint32_t* pvalue, int b){
    if(pvalue==NULL||b<0||b>31){return -1;}
    union bit_set unia;
    unia.wartosc=*pvalue;
    int bajt = b/8;
    b%=8;
    if(b==0){
        if((unia.tab+bajt)->bit1==0)
        {return 0;}else{return 1;}
    }else if(b==1){
        if((unia.tab+bajt)->bit2==0)
        {return 0;}else{return 1;}
    }else if(b==2){
        if((unia.tab+bajt)->bit3==0)
        {return 0;}else{return 1;}
    }else if(b==3){
        if((unia.tab+bajt)->bit4==0)
        {return 0;}else{return 1;}
    }else if(b==4){
        if((unia.tab+bajt)->bit5==0)
        {return 0;}else{return 1;}
    }else if(b==5){
        if((unia.tab+bajt)->bit6==0)
        {return 0;}else{return 1;}
    }else if(b==6){
        if((unia.tab+bajt)->bit7==0)
        {return 0;}else{return 1;}
    }else if(b==7){
        if((unia.tab+bajt)->bit8==0)
        {return 0;}else{return 1;}
    }else{
        return 1;
    }

    return 0;
}
