#include <stdio.h>


int concat_begin(const int first[], int size, const int second[], int size2, int dest[], int size3);
int concat_end(const int first[], int size, const int second[], int size2, int dest[], int size3);
int concat_zip(const int first[], int size, const int second[], int size2, int dest[], int size3);
int read_vector(int vec[], int size, int stop_value);
void display_vector(const int vec[], int size);

int concat_begin(const int first[], int size, const int second[], int size2, int dest[], int size3){
    if((int)size!=size||(int)size2!=size2||(int)size3!=size3)
    {
        return -1;
    }
    if(size+size2<1||size<1||size2<1||size3<1)
    {
        return -1;
    }
    if(size3<size+size2)
    {
        return -2;
    }
    for (int i=0;i<size;i++)
     {
        if((int)first[i]!=first[i])
        {
            return -1;
        }
        dest[i]=first[i];
     }
     for (int i=size; i<(size3); i++)
     {
         if((int)second[i-size]!=second[i-size])
         {
             return -1;
         }
         dest[i]=second[i-size];
     }
     return size+size2;
 }
int concat_end(const int first[], int size, const int second[], int size2, int dest[], int size3){
    if((int)size!=size||(int)size2!=size2||(int)size3!=size3)
    {
        return -1;
    }
    if(size+size2<1||size<1||size2<1||size3<1)
    {
        return -1;
    }
    if(size3<size+size2)
    {
        return -2;
    }
    for (int i=0;i<size2;i++)
    {
        if((int)second[i]!=second[i])
        {
            return -1;
        }
        dest[i]=second[i];
    }
    for (int i=size2; i<(size3); i++)
    {
        if((int)first[i-size2]!=first[i-size2])
        {
            return -1;
        }
        dest[i]=first[i-size2];
    }
    return size+size2;
}
int concat_zip(const int first[], int size, const int second[], int size2, int dest[], int size3) {
    if ((int) size != size || (int) size2 != size2 || (int) size3 != size3) {
        return -1;
    }
    if(size+size2<1||size<1||size2<1||size3<1)
    {
        return -1;
    }
    if (size3 < size + size2) {
        return -2;
    }
    int m = size2 + size - 1, n;
    if (size2 > size) {
        for (int i = 0; i < size2 + size-1; i++) {
            if (i < (size)) {
                dest[2 * i] = first[i];
                dest[2 * i + 1] = second[i];
            } else {
                m = 2 * i;
                n = i;
                break;
            }
        }
        for (int i = m; i < size2 + size; i++) {
            dest[i] = second[n];
            n++;
        }
    }else
    {
        for (int i = 0; i < size2 + size-1; i++) {
            if (i < (size2)) {
                dest[2 * i] = first[i];
                dest[2 * i + 1] = second[i];
            } else {
                m = 2 * i;
                n = i;
                break;
            }
        }
        for (int i = m; i < size2 + size; i++) {
            dest[i] = first[n];
            n++;
        }
    }
    return size+size2;
}
int read_vector(int vec[], int size, int stop_value)
{
    if (size<1)
    {
        return -1;
    }
    int j=size;
    for (int i=0; i<size; i++)
    {
        if(scanf("%d", &vec[i])!=1)
        {
            return -2;
        }
        if(vec[i]==stop_value) {
            j=i;
            break;
        }
    }
    if (j<1)
    {
        return -1;
    }
    while(getchar()!='\n')
    {}
    return j;
}
void display_vector(const int vec[], int size)
{
    if(size>0) {
        for (int i = 0; i < size; i++) {
            printf("%d ", vec[i]);
        }
        printf("\n");
    }
}

int main() {
    int tab1[50];
    int tab2[50];
    int m, n ,l;
    printf("podaj pierwszy wektor: ");
    m=read_vector(tab1, 50, 0);
    if(m==-1)
    {
        printf("Not enough data available");
        return 2;
    }else if(m==-2)
    {
        printf("Incorrect input");
        return 1;
    }

    printf("podaj drugi wektor: ");
    n=read_vector(tab2, 50, 0);
    if(n==-1)
    {
        printf("Not enough data available");
        return 2;
    }else if(n==-2)
    {
        printf("Incorrect input");
        return 1;
    }
    display_vector(tab1,m);
    display_vector(tab2,n);
    int tab3[50];
    l=concat_begin(tab1, m, tab2, n, tab3, 50);
    if(l==-1)
    {
        printf("Incorrect input");
        return 1;
    }else if(l==-2)
    {
        printf("Output buffer is too small");
    }else {
        display_vector(tab3, l);

        l = concat_end(tab1, m, tab2, n, tab3, 50);
        if (l == -1) {
            printf("Incorrect input");
            return 1;
        } else if (l == -2) {
            printf(" Output buffer is too small");
        } else { display_vector(tab3, l); }
        l = concat_zip(tab1, m, tab2, n, tab3, 50);
        if (l == -1) {
            printf("Incorrect input");
            return 1;
        } else if (l == -2) {
            printf(" Output buffer is too small");
        } else { display_vector(tab3, l); }
    }
    return 0;
}


